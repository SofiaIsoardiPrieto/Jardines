<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AADNj0+y67V9/vbEjv/OkVLqzIhEDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAHHh0dkx4hI2ciKSfbIiUjwx4hH0MeIR8zHiEfMx4hHzMeI
        R8zHiEfMx4hHzMeIR9DIiUjwyIpJ9seIR9vHiEfMx4hHiQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyIhHgceHRpXMgE0KAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMWLRhbHiUjE//8AAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyIlHXciIRnQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADHiUeIyIdFRgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMeJ
        RrXEiUUaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAx4hH0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMWESh/IiUn1y5BT3cuQU93LkFPdy5BT3cuQU93LkFPdy5BT3cuQU93LkFPdy5BT3cuQ
        U93LkFPdy5BT3cuQU93LkFPdy5BT3cuRVJ6/gEAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyIdGas6YXvf+8N///vDf//7w3//+8N///vDf//7w3//+8N///vDf//7w
        3//+8N///vDf//7w3//+8N///vDf//7w3//+8N7/3bGD8MiJSVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGiUim2at8/f7w3//+8N///vDf//7w3//+8N///vDf//7w
        3//+8N///vDf//7w3//+8N///vDf//7w3//+8N///vDf//7w3//x2L3/zZRXrAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMmMTNnnxaH//vDf//7w3//+8N//7tGy//nn
        0//+8N//893C//Pdwv/+8N//+efT/+7Rsv/+8N///vDf/+nJpv/+8N///vDf//3u3P/Nk1bkAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyYtK9PbkzP/+8N///vDf//7w
        3//esoT/89vA//7w3//oxqL/6Mai//7w3//z28D/3rKE//7w3//+8N//0p1m//7w3//+8N///vDf/9Sj
        b+nJhkomAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADJikr6/vDf//7w
        3//+8N///vDf/96yhP/z28D//vDf/+jGov/oxqL//vDf//PbwP/esoT//vDf//7w3//SnWb//vDf//7w
        3//+8N//58Wg+smOTXEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyoVFMMuP
        UPj+8N///vDf//7w3//+8N//3rKE//PbwP/+8N//6Mai/+jGov/+8N//89vA/96yhP/+8N///vDf/9Kd
        Zv/+8N///vDf//7w3//34sr/zZJXxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADIiEZ40p1k9/7w3//+8N///vDf//7w3//esoT/89vA//7w3//oxqL/6Mai//7w3//z28D/3rKE//7w
        3//+8N//0p1m//7w3//+8N///vDf//7w3//NlFnpv4BABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMmJSrTdsoT+/vDf//7w3//+8N///vDf/96yhP/z28D//vDf/+jGov/oxqL//vDf//Pb
        wP/esoT//vDf//7w3//SnWb//vDf//7w3//+8N///vDf/9quf+3FiEY+AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyYtN4erNq//+8N///vDf//7w3//+8N//5sOe//fkzf/+8N//7tO1/+/T
        tf/+8N//9+TN/+bDnv/+8N///vDf/+C2i//+8N///vDf//7w3//+8N//7dCv/syRU5AAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIikn3+unV//7w3//+8N///vDf//7w3//+8N///vDf//7w
        3//+8N///vDf//7w3//+8N///vDf//7w3//+8N///vDf//7w3//+8N///vDf//7w3//76tb/zJNX3QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/4CABMmLSvr+8N///vDf//7w3//+8N///vDf//7w
        3//+8N///vDf//7w3//+8N///vDf//7w3//+8N///vDf//7w3//+8N//+unU//PbwP/rzaz/47+W/9qr
        ef7Ii0v6zIxNFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEiUtBy5BT+P7w3//+8N///vDf//7w
        3//+8N///vDf//7w3//+8N///vDf//rp1f/z28D/682t/+O8k//csH//1qJs/9KbYv/Tm2H/2qZv/+Gx
        ff/VnWL3yoxNvMyKQiP/gIACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMiJRobUoGv5/vDf//3t
        3P/34sr/79S3/+jGov/huY3/2qp2/9KcY//Ok1f/0pth/9agaP/PlVn/6LqK//PLoP/716///ty2//7c
        tv/+3LX/3apz8c2RUpkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyIpLv8qN
        T/nLkFPxzJFU+9ahav/hsX3/6LuK//DGmf/30qn//tu2//7ctv/vx5r/05pe//jUqv/+3Lb//ty2//7c
        tv/+3Lb//ty1/9uoce/MkFCVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADHiEiyyIlJOAAAAADHh0ggzZBS5PTNov/+3Lb//ty2//7ctv/+3Lb/7sWX/c2QUurTm2Dv/duz//7c
        tv/+3Lb//ty2//3btf/apG3vzZBRigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMeIR82qqlUDAAAAAAAAAADJi0YhzpJT4/bPpv/+3Lb//ty2/+7DlfvMkFHXyYZDE8yP
        UXLXoWju/du1//7ctv/927X/2aRr7cuRUXsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/gIACzZJVt8uP
        UfPMlFiDAAAAAAAAAADFikkjx4dHswAAAAAAAAAAAAAAAAAAAADFikkjzpFT5PbQpv/tw5T6zZFS0MiA
        SQ4AAAAAAAAAAMuPUnbYo2ru/Nmy/9agZ+7MkFF3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMSJ
        SCfUoWvs/vDe/8yRVO4AAAAAv49AEMeIR7zJikc9AAAAAAAAAAAAAAAAAAAAAAAAAADJi0YhzZBS5MyQ
        UsO/gEAIAAAAAAAAAAAAAAAAAAAAAM2QU3XLjk/zy41PXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAtpJJB8uQU97Mk1f3yYxN38eHSKTHiEfMx4hGTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADKhEYdzJkzBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMuHRCIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAxo5VCcyHSUbKh0g1xoRMGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////+P8f//h+H//4fh//+AAH/+f////v/////////9/////f
        ////3////8AAD//AAA//gAAH/4AAB/+AAAf/gAAH/4AAA/+AAAP/AAAD/wAAAf8AAAH/AAAB/wAAA/4A
        AAf+AAAP/uAAH/7wMH+O+Hj/jfz9/4P/////////
</value>
  </data>
</root>